using System; namespace Sudoku {

static class Examples {
    const int _ = 123456789;

    public static Grid Get( string name ) => name switch {
        "empty" => new Grid(
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _ ),

        "top-row-only" => new Grid(
            1, 2, 3, _, 5, 6, 7, 8, 9,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _,
            _, _, _, _, _, _, _, _, _ ),

        "invalid" => new Grid(
            9, 6, _, 9, 2, _, 8, 1, _, // two 9's in one horizontal row, but the second '9' can still be solved for
            _, 2, 1, 4, _, _, _, _, _,
            _, _, 5, _, _, 3, 2, _, _,
            _, _, 2, _, _, 4, _, 3, 9,
            _, 3, 8, _, _, _, 1, 4, _,
            4, 9, _, 3, _, _, 6, _, _,
            _, _, 6, 7, _, _, 9, _, _,
            _, _, _, _, _, 9, 4, 7, _,
            _, 1, 9, _, 4, _, _, 8, 6 ),

        "easy" => new Grid( // 34 initial values (generated by sudoku.com), can be solved w/o guessing
            9, 6, _, _, 2, _, 8, 1, _,
            _, 2, 1, 4, _, _, _, _, _,
            _, _, 5, _, _, 3, 2, _, _,
            _, _, 2, _, _, 4, _, 3, 9,
            _, 3, 8, _, _, _, 1, 4, _,
            4, 9, _, 3, _, _, 6, _, _,
            _, _, 6, 7, _, _, 9, _, _,
            _, _, _, _, _, 9, 4, 7, _,
            _, 1, 9, _, 4, _, _, 8, 6 ),

        "medium" => new Grid( // 30 initial values (generated by sudoku.com), can be solved w/o guessing
            2, _, 7, _, _, _, _, _, _,
            _, _, 5, 6, _, 7, _, _, 4,
            8, _, _, _, _, _, 1, _, _,
            _, 1, _, _, 7, 9, 6, _, 8,
            _, 5, _, _, 6, 2, _, 4, _,
            _, _, _, 5, 3, _, _, _, _,
            7, _, 1, _, _, 5, _, _, _,
            _, _, _, _, 2, 6, 8, _, 5,
            _, _, 6, 8, _, 1, 4, _, _ ),

        "hard" => new Grid( // 25 initial values (generated by sudoku.com), can be solved w/o guessing
            6, _, _, _, _, _, _, _, _,
            _, _, 1, _, _, _, 4, 6, _,
            5, _, _, _, _, 3, 2, _, _,
            _, _, _, _, 8, _, _, _, _,
            _, 9, 6, 4, _, _, _, _, _,
            2, _, 4, _, 1, _, 5, _, 3,
            _, _, 8, _, _, _, _, 3, _,
            _, _, 3, 2, 4, _, _, 1, _,
            _, _, _, _, _, 8, 6, _, 2 ),

        "expert" => new Grid( // 22 initial values (generated by sudoku.com). can be solved w/ guessing
            _, _, _, _, _, 7, 9, 1, _,
            _, _, _, _, 1, _, _, _, _,
            _, 2, _, _, 9, _, 5, _, _,
            _, 6, _, _, _, _, _, 7, _,
            _, _, _, 4, _, 6, _, _, 8,
            _, _, 5, _, _, _, _, _, 2,
            7, _, _, 3, _, _, _, _, _,
            2, _, _, 7, 8, _, _, _, _,
            9, 5, 1, _, _, _, _, _, _ ),

        _ => throw new ArgumentException( "unrecognized example name: " + name + ", must be one of [empty,top-row-only,invalid,easy,medium,hard,expert]" )
    };
}

} // namespace
